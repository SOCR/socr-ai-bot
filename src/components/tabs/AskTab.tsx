
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/components/ui/use-toast';
import { Upload, Loader2 } from 'lucide-react';
import { demoQuestions, demoModelChoices } from '@/lib/demoData';
import apiService from '@/lib/apiService';

const AskTab: React.FC = () => {
  const { toast } = useToast();
  const [question, setQuestion] = useState('');
  const [model, setModel] = useState('gpt-4o');
  const [loading, setLoading] = useState(false);
  const [response, setResponse] = useState<string | null>(null);
  const [userImage, setUserImage] = useState<File | null>(null);

  const handleQuestionSelect = (value: string) => {
    const selected = demoQuestions.find(q => q.value === value);
    if (selected) {
      setQuestion(selected.label);
    }
  };

  const handleModelSelect = (value: string) => {
    setModel(value);
  };

  const handleAsk = async () => {
    if (!question.trim()) {
      toast({
        title: "Empty Question",
        description: "Please enter a question to ask the AI Bot.",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    setResponse(null);

    try {
      // In a real implementation, this would call an AI service
      // For now, we'll simulate a response
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setResponse(`This is a simulated response to your question: "${question}"\n\nIn a real implementation, this would be generated by the ${model} model.\n\nI can provide detailed answers to your data science questions, explain statistical concepts, or help with data analysis tasks.`);
    } catch (error) {
      console.error("Error asking question:", error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setUserImage(e.target.files[0]);
      toast({
        title: "Image Uploaded",
        description: `${e.target.files[0].name} has been uploaded`
      });
    }
  };

  return (
    <div className="container mx-auto py-6">
      <div className="max-w-3xl mx-auto">
        <div className="mb-8 text-center">
          <img 
            src="https://wiki.socr.umich.edu/images/thumb/5/5e/SOCR_UMich_2020a.png/1025px-SOCR_UMich_2020a.png" 
            alt="SOCR Logo"
            className="h-24 w-auto mx-auto mb-4"
          />
          <h2 className="text-2xl font-bold">Ask AI Bot</h2>
        </div>

        <Card className="mb-6">
          <CardContent className="p-6 space-y-4">
            <Textarea
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              placeholder="Ask AI Bot a question..."
              rows={4}
              className="w-full resize-none"
            />
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Select onValueChange={handleModelSelect} defaultValue={model}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select AI model" />
                </SelectTrigger>
                <SelectContent>
                  {demoModelChoices.map((model) => (
                    <SelectItem key={model.value} value={model.value}>
                      {model.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              
              <Select onValueChange={handleQuestionSelect}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select example question" />
                </SelectTrigger>
                <SelectContent>
                  {demoQuestions.map((q) => (
                    <SelectItem key={q.value} value={q.value}>
                      {q.value}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex items-center gap-4">
              <Button 
                variant="outline" 
                className="flex items-center gap-2"
                onClick={() => document.getElementById('image-upload')?.click()}
              >
                <Upload size={16} />
                Upload Image
                <input
                  id="image-upload"
                  type="file"
                  className="hidden"
                  accept="image/png,image/jpeg,application/pdf"
                  onChange={handleImageUpload}
                />
              </Button>
              
              {userImage && (
                <p className="text-sm text-muted-foreground truncate">
                  {userImage.name}
                </p>
              )}
            </div>
            
            <Button 
              onClick={handleAsk} 
              disabled={loading || !question.trim()}
              className="w-full bg-socr-blue hover:bg-socr-darkblue"
            >
              {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Ask AI Bot
            </Button>
          </CardContent>
        </Card>

        {response && (
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">AI Bot Response</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="prose max-w-none">
                <p className="whitespace-pre-line text-socr-purple">{response}</p>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};

export default AskTab;
